name: Build and Publish Docker Image

on:
  push:
    branches:
      - main
    

jobs:
  build-and-publish:
    runs-on: ubuntu-latest

    steps:
      # Étape 1 : Récupérer le code source
      - name: Checkout code
        uses: actions/checkout@v3

      # Étape 2 : Se connecter au registre GitHub Packages
      - name: Log in to GitHub Packages
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Étape 3 : Construire l'image Docker
      - name: Build Docker Image
        run: |
          docker build -t ghcr.io/${{ github.repository_owner }}/${{ github.repository }}:latest .

      # Étape 4 : Publier l'image Docker
      - name: Push Docker Image
        run: |
          docker push ghcr.io/${{ github.repository_owner }}/${{ github.repository }}:latest


name: CI Workflow

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Construire l'image Docker
      - name: Build Docker image
        run: |
          docker build -t my-app .

      # Scanner l'image Docker avec Trivy
      - name: Scan Docker image for vulnerabilities with Trivy
        uses: aquasecurity/trivy-action@v0.5.0
        with:
          image: my-app
          format: 'table'  # Format du rapport, 'table', 'json', ou 'sarif'
          severity: 'HIGH,CRITICAL'  # Niveaux de sévérité à scanner

      # Autres étapes de votre pipeline CI, par exemple, pousser l'image si elle est propre
      - name: Push Docker image to registry
        run: |
          docker tag my-app my-docker-registry/my-app
          docker push my-docker-registry/my-app
